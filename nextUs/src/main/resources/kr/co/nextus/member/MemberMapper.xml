<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.nextus.member.MemberMapper">
	<insert id="regist" parameterType="kr.co.nextus.member.MemberVO">
		INSERT INTO MEMBER (
		no, email, pwd, name,
		nickname, gender, birthday, hp, zipcode,
		addr1, addr2, regdate, state, seller,
		profile_org, profile_real, loginstate)
		VALUES (
		#{no}, #{email}, MD5(#{pwd}), #{name},
		#{nickname}, #{gender}, #{birthday}, #{hp}, #{zipcode},
		#{addr1}, #{addr2}, #{regdate}, 0, #{seller},
		'default_profile.png', 'default_profile.png', #{loginstate});
		<selectKey order="AFTER" keyProperty="no" resultType="int">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
	</insert>
	<select id="emailCheck" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM MEMBER WHERE email=#{email} AND loginstate=#{loginstate}
	</select>

	<select id="login" parameterType="kr.co.nextus.member.MemberVO"
		resultType="kr.co.nextus.member.MemberVO">
		SELECT * FROM MEMBER WHERE email=#{email} AND
		pwd=MD5(#{pwd})
	</select>

	<select id="detail" parameterType="int"
		resultType="kr.co.nextus.member.MemberVO">
		SELECT * FROM MEMBER WHERE
		no=#{no}
	</select>
	
	<select id="findByEmail" parameterType="string" resultType="kr.co.nextus.member.MemberVO">
        SELECT * FROM MEMBER WHERE email = #{email}
    </select>
    
    <select id="findByEmail2" parameterType="kr.co.nextus.member.MemberVO" resultType="kr.co.nextus.member.MemberVO">
        SELECT * FROM MEMBER WHERE email = #{email} AND loginstate=#{loginstate}
    </select>
    
    <select id="findId" parameterType="kr.co.nextus.member.MemberVO" resultType="kr.co.nextus.member.MemberVO">
    	SELECT email
    	FROM MEMBER
    	WHERE name = #{name} AND birthday = #{birthday, jdbcType=DATE} AND hp = #{hp}
	</select>
	
	<insert id="insertMember" parameterType="kr.co.nextus.member.MemberVO" useGeneratedKeys="true" keyProperty="no">
    INSERT INTO MEMBER (email, name, state, loginstate, nickname)
    VALUES (#{email}, #{name}, 0, #{loginstate}, #{nickname})
	</insert>

    
	<update id="update" parameterType="kr.co.nextus.member.MemberVO">
		UPDATE MEMBER SET
		<if test="pwd != ''">
			pwd = MD5(#{pwd}),
		</if>
		name = #{name},
		gender = #{gender},
		birthday = #{birthday},
		hp = #{hp},
		zipcode = #{zipcode},
		addr1 = #{addr1},
		addr2 = #{addr2}
		WHERE no = #{no}
	</update>
	
	<update id="updatePassword" parameterType="map">
        UPDATE MEMBER
        SET pwd = MD5(#{pwd})
        WHERE email = #{email}
    </update>
    
    <update id="updateNickname">
    	UPDATE MEMBER
    	SET nickname = #{nickname}, pwd = MD5(#{nickname})
    	WHERE no = #{no}
	</update>
	
	


	<!-- ========== -->
	<!-- 관리자 페이지 -->
	<!-- ========== -->
	<sql id="searchSql">
		<where>
			<if test="searchWord != null and searchWord != ''">
				<if test="searchType == 'all'">
					no LIKE '%${searchWord}%' OR
					email LIKE '%${searchWord}%'
					OR
					nickname LIKE '%${searchWord}%'
				</if>
				<if test="searchType != 'all'">
					${searchType} LIKE '%${searchWord}%'
				</if>
			</if>
		</where>
	</sql>

	<!-- 리스트 10개씩 출력 -->
	<select id="list" parameterType="kr.co.nextus.member.MemberVO" resultType="kr.co.nextus.member.MemberVO">
		SELECT *,(SELECT COUNT(*) FROM BUYLIST WHERE memberno=MEMBER.no)as
		purchaseCount
		FROM MEMBER
		<include refid="searchSql" />
		ORDER BY no DESC
		LIMIT #{startIdx}, 10
	</select>
	<!-- 카운트 -->
	<select id="count" parameterType="kr.co.nextus.member.MemberVO" resultType="int">
		SELECT COUNT(*) FROM MEMBER
		<include refid="searchSql" />
	</select>

	<!-- 리스트 한번에 다 출력 -->
	<select id="listAtOnce"
		parameterType="kr.co.nextus.member.MemberVO" resultType="kr.co.nextus.member.MemberVO">
		SELECT * FROM MEMBER
		<!-- <include refid="searchSql"/> -->
		ORDER BY no DESC
	</select>

	<select id="memberReportCountList"
        parameterType="kr.co.nextus.member.MemberVO" 
        resultType="kr.co.nextus.member.MemberVO">
    SELECT 
        m.no, 
        m.email, 
        m.nickname, 
        m.regdate, 
        COALESCE(reportCounts.reportcount, 0) AS reportcount,
        COALESCE(banCounts.bancount, 0) AS bancount
    FROM 
        MEMBER m
    LEFT JOIN 
        (SELECT reportedmemberno, COUNT(*) AS reportcount
         FROM REPORT
         GROUP BY reportedmemberno) reportCounts ON m.no = reportCounts.reportedmemberno
    LEFT JOIN 
        (SELECT memberno, COUNT(*) AS bancount
         FROM BAN
         GROUP BY memberno) banCounts ON m.no = banCounts.memberno
    <include refid="searchSql2" /> 
    WHERE 
        m.seller = 0
    GROUP BY 
        m.no, m.email, m.nickname, m.regdate
    HAVING 
        reportcount > 0;
</select>

		
	<!-- 누적 신고횟수 이메일,닉네임과 함께 출력 (샐러중에)-->
	<select id="sellerReportCountList"
        parameterType="kr.co.nextus.member.MemberVO" 
        resultType="kr.co.nextus.member.MemberVO">
    SELECT 
        m.no, 
        m.email, 
        m.nickname, 
        m.regdate, 
        COALESCE(reportCounts.reportcount, 0) AS reportcount,
        COALESCE(banCounts.bancount, 0) AS bancount
    FROM 
        MEMBER m
    LEFT JOIN 
        (SELECT reportedmemberno, COUNT(*) AS reportcount
         FROM REPORT
         GROUP BY reportedmemberno) reportCounts ON m.no = reportCounts.reportedmemberno
    LEFT JOIN 
        (SELECT memberno, COUNT(*) AS bancount
         FROM BAN
         GROUP BY memberno) banCounts ON m.no = banCounts.memberno
    <include refid="searchSql2" /> 
    WHERE 
        m.seller = 1
    GROUP BY 
        m.no, m.email, m.nickname, m.regdate
    HAVING 
        reportcount > 0;
</select>

	<!-- SEARCHSQL2 -->
	<sql id="searchSql2">
		<where>
			<if test="searchWord != null and searchWord != ''">
				<if test="searchType == 'all'">
					m.no LIKE '%${searchWord}%' OR
					m.email LIKE '%${searchWord}%'
					OR
					m.nickname LIKE '%${searchWord}%'
				</if>
				<if test="searchType != 'all'">
					m.${searchType} LIKE '%${searchWord}%'
				</if>
			</if>
		</where>
	</sql>
	
	<!-- 샐러승인나면 seller=1로 -->
	<update id="sellerRegist" parameterType="kr.co.nextus.member.MemberVO">
		UPDATE MEMBER SET
		seller=1
		WHERE no = #{no}
	</update>
	
	<!-- 제재시 state1로 -->
	<update id="ban" parameterType="int">
		UPDATE MEMBER
		SET state = 1
		WHERE no = #{no}
	</update>
	
	<!-- adminMain 그래프-->
	<select id="seven_days_members" parameterType="kr.co.nextus.member.MemberVO" resultType="kr.co.nextus.member.MemberVO">
    <![CDATA[
    SELECT 
        d.totaldate,
        IFNULL(m.totalmember, 0) AS totalmember
    FROM (
        SELECT CURDATE() AS totaldate
        UNION ALL
        SELECT DATE_SUB(CURDATE(), INTERVAL 1 DAY) AS totaldate
        UNION ALL
        SELECT DATE_SUB(CURDATE(), INTERVAL 2 DAY) AS totaldate
        UNION ALL
        SELECT DATE_SUB(CURDATE(), INTERVAL 3 DAY) AS totaldate
        UNION ALL
        SELECT DATE_SUB(CURDATE(), INTERVAL 4 DAY) AS totaldate
        UNION ALL
        SELECT DATE_SUB(CURDATE(), INTERVAL 5 DAY) AS totaldate
        UNION ALL
        SELECT DATE_SUB(CURDATE(), INTERVAL 6 DAY) AS totaldate
        UNION ALL
        SELECT DATE_SUB(CURDATE(), INTERVAL 7 DAY) AS totaldate
    ) d
    LEFT JOIN (
        SELECT 
            DATE(regdate) AS regdate,
            COUNT(*) AS totalmember
        FROM MEMBER
        WHERE regdate >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
        GROUP BY DATE(regdate)
    ) m ON d.totaldate = m.regdate
    ORDER BY d.totaldate
    ]]>
</select>

	
	<!-- adminMain 1-1-->
	<select id="total_members" parameterType="kr.co.nextus.member.MemberVO" resultType="int" >
	SELECT count(*) as total_members FROM MEMBER
	</select>
	<!-- adminMain 1-1-->
	<select id="today_members" parameterType="kr.co.nextus.member.MemberVO" resultType="int" >
	SELECT count(*) as total_members FROM MEMBER WHERE DATE(regdate) = CURDATE()
	</select>
	
	
	<update id="banFree" parameterType="int">
    <![CDATA[
    UPDATE MEMBER
    SET state = 0
    WHERE no = (SELECT memberno FROM BAN WHERE no = #{banno})
    ]]>
</update>

</mapper>